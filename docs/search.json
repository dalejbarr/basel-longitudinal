[{"path":"index.html","id":"workshop-overview","chapter":"Workshop Overview","heading":"Workshop Overview","text":"Dale J. BarrUniversity Basel, March 2-3, 2022","code":""},{"path":"index.html","id":"workshop-goals","chapter":"Workshop Overview","heading":"Workshop goals","text":"goal workshop provide foundational understanding use mixed-effects models analysis panel (longitudinal) data, focus repeated-measures data. Mixed-effects models regression models estimate 'mix' fixed random effects.Two pre-requisites workshop : (1) basic understanding linear regression (2) familiarity R statistical programming environment (https://cran.r-project.org) important pre-requisite workshop.Please R RStudio installed laptop prior start workshop, including packages tidyverse lme4. can find help installation Appendix.possible understand conceptual content workshop without knowing R, interactive exercises require understanding fundamentals R programming. beginners, recommended work introductory materials Appendix.","code":""},{"path":"index.html","id":"workshop-plan","chapter":"Workshop Overview","heading":"Workshop plan","text":"Day 1 (Thursday, March 2, 2pm-6pm): Linear regression\nmultiple regression General Linear Model\ncoding categorical predictor variables\ninteractions\nmodel comparison diagnostics\nmodeling trends (polynomial, generalized additive mixed models)\nmultiple regression General Linear Modelcoding categorical predictor variablesinteractionsmodel comparison diagnosticsmodeling trends (polynomial, generalized additive mixed models)Day 2 (Friday, March 3, 9am-1pm): Mixed-effects modeling\nvariance-covariance matrices\nwalkthrough sleepstudy data\nspecifying random-effects structure\ndealing autocorrelation\ngoing :\nGeneralized Linear Mixed Models (GLMMs) \nGeneralized Additive Mixed Models (GAMMs)\n\nvariance-covariance matriceswalkthrough sleepstudy dataspecifying random-effects structuredealing autocorrelationgoing :\nGeneralized Linear Mixed Models (GLMMs) \nGeneralized Additive Mixed Models (GAMMs)\nGeneralized Linear Mixed Models (GLMMs) andGeneralized Additive Mixed Models (GAMMs)","code":""},{"path":"index.html","id":"notes-on-these-materials","chapter":"Workshop Overview","heading":"Notes on these materials","text":"materials comprise interactive textbook. \"chapter\" contains embedded exercises well web applications help participants better understand content. interactive content work access material web browser. Printing material recommended.good keep local copy materials case website eventually disappears. Following workshop, instructor provide ZIP archive copy can access offline web browser. Just extract files ZIP archive, locate file index.html docs directory, open file using web browser.free re-use modify material textbook purposes, stipulation cite original work. Please note additional terms Creative Commons CC--SA 4.0 license governing re-use material.book built using R bookdown package. source files available github.","code":""},{"path":"index.html","id":"found-an-issue","chapter":"Workshop Overview","heading":"Found an issue?","text":"find errors typos, questions suggestions, please file issue https://github.com/dalejbarr/basel-longitudinal/issues. Thanks!","code":""},{"path":"installing-and-configuring-rrstudio.html","id":"installing-and-configuring-rrstudio","chapter":"A Installing and Configuring R/RStudio","heading":"A Installing and Configuring R/RStudio","text":"course, developing scripts R programming language using RStudio Desktop Integrated Development Environment. document provides instructions installing R RStudio laptop. older versions applications already installed, please perform fresh installs latest versions (time writing, R 4.0.3 RStudio Desktop 1.4.1103).applications installed working, also need install additional packages add functionality base install.","code":""},{"path":"installing-and-configuring-rrstudio.html","id":"what-is-r","chapter":"A Installing and Configuring R/RStudio","heading":"A.1 What is R?","text":"R programming environment data analysis developed almost two decades ago, longer history derivative language scripting language S-PLUS developed Bell Labs 70s 80s.“Base R” interactive mode consists “Read Evaluate Print Loop” (REPL) command interpreter, type text commands, evaluated, results printed screen. “R Console” window looks something like .can access functionality R interactively typing commands console, far convenient interact R Integrated Development Environment, RStudio.","code":""},{"path":"installing-and-configuring-rrstudio.html","id":"the-rstudio-integrated-development-environment-ide","chapter":"A Installing and Configuring R/RStudio","heading":"A.2 The RStudio Integrated Development Environment (IDE)","text":"developing script, generally type text editor send commands type console, rather typing commands directly console. RStudio Desktop IDE integrated R console offers additional functionality helps write code accurately efficiently. IDEs available, including Jupyter notebooks emacs org-mode, users---especially, novices---RStudio best option.","code":""},{"path":"installing-and-configuring-rrstudio.html","id":"install","chapter":"A Installing and Configuring R/RStudio","heading":"A.3 Installation","text":"installing three things:Base R (RTools Windows user)RStudio Desktop IDEAdd-packages RInstalling R RStudio fairly easy. sections explain .","code":""},{"path":"installing-and-configuring-rrstudio.html","id":"installing-base-r","chapter":"A Installing and Configuring R/RStudio","heading":"A.3.1 1. Installing Base R","text":"Go https://cloud.r-project.org/ choose \ndownload link operating system (Linux, Mac OS X, Windows)\ninstall ‘base’ binaries distribution. using Linux\nMac OS, done; skip next section RStudio.installing Windows, install R, \nalso install RTools. Click \n‘recommended’ (experimental) version near top list (Rtools35.exe \ntime writing).","code":""},{"path":"installing-and-configuring-rrstudio.html","id":"installing-rstudio-desktop","chapter":"A Installing and Configuring R/RStudio","heading":"A.3.2 2. Installing RStudio Desktop","text":"install RStudio Desktop IDE successfully installed base R. Go https://www.rstudio.com/products/rstudio/download/#download heading \"Installers Supported Platforms\" download version operating system.","code":""},{"path":"installing-and-configuring-rrstudio.html","id":"launch-rstudio","chapter":"A Installing and Configuring R/RStudio","heading":"A.3.2.1 Launch RStudio","text":"installation, icons RStudio “R commander” system. R Commander primitive IDE comes packaged R. use ; always use RStudio.Make sure launch RStudio IDE R commander clicking correct icon. Launching RStudio also launch R console, appear embedded window pane within application.installation successful, launch RStudio, see screen looks like :Screenshot RStudio IDE","code":""},{"path":"installing-and-configuring-rrstudio.html","id":"installing-add-on-packages","chapter":"A Installing and Configuring R/RStudio","heading":"A.3.3 3. Installing add-on packages","text":"large number add-packages add additional functionality R. take step step process.install packages, going type commands R console window. console part RStudio IDE looks like :cursor just next caret > symbol bottom type commands.","code":""},{"path":"installing-and-configuring-rrstudio.html","id":"install-the-tidyverse","chapter":"A Installing and Configuring R/RStudio","heading":"A.3.3.1 Install the tidyverse","text":"first thing install tidyverse. tidyverse actually meta-package---collection packages---useful data processing visualization. Depending speed computer, might take minutes maybe even 10 minutes install process complete.install tidyverse, type following code console press return.first download packages, see lot text fly looks like :perfectly normal behavior. packages compiled source, download, lot gibberish appear screen. , perfectly normal cause panic. example gibberish looks like:package installs successfully, see text looks like :Hopefully, none packages result errors returned caret > prompt. get errors happens, can help diagnose problems first morning arrival.want learn packages included tidyverse , check http://www.tidyverse.org.","code":"\ninstall.packages(\"tidyverse\")trying URL 'https://cloud.r-project.org/src/contrib/packagename_X.XX.tar.gz'\nContent type 'application/x-gzip' length 3146818 bytes (3.0 MB)\n==================================================\ndownloaded 3.0 MB/home/dalebarr/R/x86_64-pc-linux-gnu-library/3.4/TMB/include/atomic_math.hpp:426:1:   required from ‘void atomic::matmul(const CppAD::vector<Type>&, CppAD::vector<Type>&) [with Double = double]’\n/home/dalebarr/R/x86_64-pc-linux-gnu-library/3.4/TMB/include/atomic_math.hpp:426:1:   required from ‘bool atomic::atomicmatmul<Type>::forward(size_t, size_t, const CppAD::vector<bool>&, CppAD::vector<bool>&, const CppAD::vector<Type>&, CppAD::vector<Type>&) [with Type = double; size_t = long unsigned int]’\nglmmTMB.cpp:863:1:   required from here* installing *source* package ‘dplyr’ ...\n** package ‘dplyr’ successfully unpacked and MD5 sums checked\n** R\n** inst\n** preparing package for lazy loading\n** help\n*** installing help indices\n** building package indices\n** testing if installed package can be loaded\n* DONE (dplyr)"},{"path":"installing-and-configuring-rrstudio.html","id":"install-additional-packages","chapter":"A Installing and Configuring R/RStudio","heading":"A.3.3.2 Install additional packages","text":"also need package lme4 provides functions mixed-effects modeling.probably take minutes complete, see lots gibberish appear console package installs.","code":"\ninstall.packages(\"lme4\")"},{"path":"installing-and-configuring-rrstudio.html","id":"optional-install-rmarkdown-and-related-packages","chapter":"A Installing and Configuring R/RStudio","heading":"A.3.3.3 (Optional) Install RMarkdown and related packages","text":"completing exercises, useful create files can compiled dynamic reports using RMarkdown, text-based format integrating code, text, graphics.easiest way install packages need just create new RMarkdown document, RStudio prompt install packages required.pull menu, choose File -> New File -> RMarkdown... lead prompt install packages.installed, ready go!","code":""},{"path":"installing-and-configuring-rrstudio.html","id":"additional-tweaks-you-might-want-to-try","chapter":"A Installing and Configuring R/RStudio","heading":"A.4 Additional tweaks you might want to try","text":"installing R RStudio easy, might want tweak installation bit.","code":""},{"path":"installing-and-configuring-rrstudio.html","id":"changing-how-rstudio-looks","chapter":"A Installing and Configuring R/RStudio","heading":"A.4.1 Changing how RStudio looks","text":"appearance RStudio fully configurable. can try different options going Tools --> Global Options choosing Appearance icon. can choose bigger font change color theme. Express !","code":""},{"path":"installing-and-configuring-rrstudio.html","id":"compiling-pdf-reports","chapter":"A Installing and Configuring R/RStudio","heading":"A.4.2 Compiling PDF reports","text":"tweak bit harder completely optional. want able compile reports PDF, need install LaTeX typesetting system. Without additional tweak, able produce reports HTML PDF. various options, easiest probably TinyTeX: https://yihui.name/tinytex.","code":""},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"coding-in-r-with-the-rstudio-ide","chapter":"B Coding in R with the RStudio IDE","heading":"B Coding in R with the RStudio IDE","text":"","code":""},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"learning-objectives","chapter":"B Coding in R with the RStudio IDE","heading":"B.1 Learning objectives","text":"Understand R console components RStudio IDEAppropriately structure R scriptInstall add-packagesUse R calculatorUnderstand basic data types (integer, double, character, factor)Create vectors store values variablesUnderstand vectorized operationsCall functions supply argumentsString together operations using pipesLoad data CSV Excel filesCreate simple data frame handCreate compile Rmarkdown document","code":""},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"introduction","chapter":"B Coding in R with the RStudio IDE","heading":"B.2 Introduction","text":"","code":""},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"what-is-r-1","chapter":"B Coding in R with the RStudio IDE","heading":"B.2.1 What is R?","text":"programming environment data processing statistical analysisfree open-sourcecommunity supportedcontinually evolvingpromotes reproducible research","code":""},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"interacting-with-r","chapter":"B Coding in R with the RStudio IDE","heading":"B.2.2 Interacting with R","text":"","code":""},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"the-base-r-console","chapter":"B Coding in R with the RStudio IDE","heading":"B.2.2.1 The Base R Console","text":"R developed almost two decades ago, longer history derivative language scripting language S-PLUS developed Bell Labs 70s 80s. “Base R” consists “Read Evaluate Print Loop” (REPL) command interpreter, type text commands, evaluated, results printed screen. “R Console” window looks something like .","code":""},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"the-rstudio-integrated-development-environment-ide-1","chapter":"B Coding in R with the RStudio IDE","heading":"B.2.2.2 The RStudio Integrated Development Environment (IDE)","text":"However, developing script, want work text editor send commands console, rather typing directly console. Developing analysis script R essentially exercise programming, developing code best use Integrated Development Environment IDE. IDE provides additional functionality wraps around basic console.IDE highly recommended class RStudio (http://www.rstudio.com) depicted . IDE provides multiple windows additional console greatly facilitate developing code. addition console (appearing bottom left window figure), script editor (top left), provides syntax highlighting, autocompletion, pop-tool tips, window showing functions objects residing memory session “Environment” tab (top right window figure), window shows plots, files working directory, available add-packages, documentation (bottom right).install base R RStudio, interact R RStudio IDE. icons RStudio primitive IDE called “R commander” comes packaged R. R commander sophisticated user-friendly RStudio, make sure launch RStudio IDE R commander clicking correct icon. Launch RStudio also launch R console, need click.\nALWAYS REMEMBER: Launch R though RStudio IDE\n","code":""},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"configure-rstudio-to-maximize-reproducibility-and-minimize-confusion","chapter":"B Coding in R with the RStudio IDE","heading":"B.2.2.3 Configure RStudio to maximize reproducibility and minimize confusion","text":"class, learning develop reproducible scripts. means scripts completely transparently perform analysis start finish way yields result different people using software different computers. transparency key value science, embodied “trust verify” motto. things reproducibly, others can understand check work. benefits science, selfish reason, : important person benefit reproducible script future self. return analysis two weeks vacation, thank earlier self things transparent, reproducible way, can easily pick right left .\ntwo tweaks RStudio installation maximize reproducibility. Go setting menu, uncheck box says “Restore .RData workspace startup”. keep things around workspace, things get messy, unexpected things happen. always start clear workspace. also means never want save workspace exit, set “Never”. thing want save scripts.\nAnother tweak recommend beginners turn inline results image previews RMarkdown files. RMarkdown files just plain text, default, RStudio makes look like images results appear inside text. Beginners mostly familiar software MS Word easily get wrong idea 'part' file. can confusing beginners, turn options . can best see results code chunk running looking console window can view images pop-ups.","code":""},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"live-coding-demo-developing-reproducible-r-scripts","chapter":"B Coding in R with the RStudio IDE","heading":"B.3 Live coding demo: Developing reproducible R scripts","text":"instructor now go live coding exercise give basic overview developing R script using RStudio IDE.Feel free just watch follow along typing script.demonstration make use dataset Berlin Babynames 2012-2020 provided Berliner Landesamt für Bürger- und Ordnungsangelegenheiten (LABO) / BerlinOnline Stadtportal GmbH & Co. KG. need download version data, info one big file: berlin-babynamen.csv (CSV format)R script basic type document can work . simply plain-text file containing set commands executed sequence, top bottom.scripts follow generic structure:\nload add-packages need usedefine custom functionsload data working withwork datasave anything need saveHere example (live-coding script may differ):skills tips demonstrated live coding session include:installing loading add-packagessetting working directorydata importdata entry using \"tibble\"navigating script pane console pane using shortcut keys Ctrl+1 Ctrl+2running line code using Ctrl+Entergetting helpembedding code chunks RMarkdown document\"knitting\" (compiling) dynamic report RMarkdownWe go skills depth later document.","code":"\n# load add-on packages that we need\nlibrary(\"tidyverse\")\nlibrary(\"cowsay\")\n\nbbnames <- read_csv(\"berlin-babynamen.csv\", col_types = \"ficif\")\n\nwho <- c(\"Dale\", \"Juliane\", \"Pia\")\n\ndat <- bbnames %>%\n  filter(vorname %in% who) %>%\n  mutate(vorname = factor(vorname)) %>%\n  group_by(jahr, vorname, .drop = FALSE) %>%\n  summarise(tot = sum(anzahl), .groups = \"drop\")\n\ng <- ggplot(dat, aes(jahr, tot)) +\n  geom_line() +\n  facet_wrap(~ vorname, scales = \"free_y\")\n\nggsave(\"names.png\", g)\n\n# if you lack the cowsay package, then type\n# the following in the console:\n# install.packages(\"cowsay\")\nsay(\"We did it!\", \"signbunny\")"},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"self-guided-introduction-with-exercises","chapter":"B Coding in R with the RStudio IDE","heading":"B.4 Self-guided introduction with exercises","text":"","code":""},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"typing-in-commands","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.1 Typing in commands","text":"first going learn interact console. generally, developing R scripts R markdown files, rather working directly console window. However, can consider console kind ’sandbox’ can try lines code adapt get want. can copy back script editor.Mostly, however, typing script editor window (either R script RMarkdown file) sending commands console placing cursor line holding Ctrl key press Enter. Ctrl+Enter key sequence sends command script console.","code":""},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"warming-up-use-r-as-a-calculator","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.1.1 Warming up: Use R as a calculator","text":"One simple way learn R console use calculator. Enter lines code see results match. prepared make lots typos (first) :/R console remembers history commands typed past. Use arrow keys keyboard scroll backwards forwards history. lot faster re-typing.can break math expressions multiple lines; R waits complete expression processing .can break text multiple lines; R waits close quote processing .can add comments R script ’#’ symbol. R interpreter ignore characters # symbol end line.Exercise: Calculate 8,657 divided 6.5.","code":"\n## REPL: Read/Evaluate/Print Loop\n## R prints results back at you\n1 + 1## [1] 2\n1 + 1 + 3## [1] 5\n## here comes a long expression\n## let's break it over multiple lines\n1 + 2 + 3 + 4 + 5 + 6 +\n    7 + 8 + 9 +\n    10## [1] 55\n\"Good afternoon\"## [1] \"Good afternoon\"\n\"There is nothing in the world \nthat makes people so unhappy as fear.  \nThe misfortune that befalls us is \nseldom, or never, as bad as that \nwhich we fear.\n\n- Friedrich Schiller\"## [1] \"There is nothing in the world \\nthat makes people so unhappy as fear.  \\nThe misfortune that befalls us is \\nseldom, or never, as bad as that \\nwhich we fear.\\n\\n- Friedrich Schiller\"\n## comments: any text from '#' on is ignored until end of line\n22 / 7  # approximation to pi## [1] 3.142857\n    8657/6.5## [1] 1331.846"},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"storing-results-in-a-variable","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.1.2 Storing results in a variable","text":"Often want store result computation later use. can store variable. important things consider naming variables.capitalization matters (myVar different myvar)use spaces special characters (^&\"'*+?) etc.; use ’_’\nuse space (e.g., my_var legal variable\nname)must begin letter (m2 valid name, 2m )Use assignment operator <- assign value right variable named left.Now set x value, can something :Note print result back stored. view result, just type variable name blank line.","code":"\n## use the assignment operator '<-'\n## R stores the number in the variable\nx <- 5\nx * 2\n\n## R evaluates the expression and stores the result in the variable\nboring_calculation <- 2 + 2## [1] 10\nboring_calculation## [1] 4"},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"whitespace","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.1.3 Whitespace","text":"\nsee > beginning line, means R waiting start new command. However, see + instead > start line, means R waiting finish command started previous line. want cancel whatever command started, just press Esc key console window ’ll get back > command prompt.\n","code":"\n# R waits until next line for evaluation\n(3 + 2) *\n     5## [1] 25\n# often useful to spread function arguments over multiple lines\nlibrary(cowsay)\nsay(\"This function call is far too wide to fit all on one line\",\n    \"stretchycat\")## \n##  -------------- \n## This function call is far too wide to fit all on one line \n##  --------------\n##     \\\n##       \\\n##         \\\n##                         ,/|         _.--‛‛^``-...___.._.,;\n##                       /, \\‛.     _-‛          ,--,,,--‛‛‛\n##                      {  \\    `_-‛‛       ‛    /}‛\n## Jill                    `;;‛             ;   ; ;\n##                   ._.--‛‛     ._,,, _..‛  .;.‛\n##                   (,_....----‛‛‛     (,..--‛‛\n## "},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"the-workspace","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.1.4 The workspace","text":"Anytime assign something new variable, R creates new object workspace. Objects workspace exist end session; disappear forever (unless save ).","code":"\nls()  # print the objects in the workspace\n\nrm(\"x\")   # remove the object named x from the workspace\n\nrm(list = ls()) # clear out the workspace## [1] \"backtick\"           \"boring_calculation\" \"chapter_status\"    \n## [4] \"hl\"                 \"path\"               \"pkg\"               \n## [7] \"psyteachr_colors\"   \"psyteachr_colours\"  \"x\""},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"some-basic-data-types","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.2 Some basic data types","text":"four main basic data types R (, critical ones need know ).also specific data type called factor probably give headache sooner later, can get now without .Character strings can include basically anything, including quotes, want quote included 'escape' using backslash:Note just type plain number 10 stored double, even decimal point. want exact integer, use L suffix (10L).ever want know data type something, use class function. also mode function specifically vectors.","code":"\nmy_string <- \"The instructor said, \\\"R is cool,\\\" and the class agreed.\"\nmy_string## [1] \"The instructor said, \\\"R is cool,\\\" and the class agreed.\"\nclass(10) # numeric\nclass(10L) # integer\nclass(\"10\") # string\nclass(10L == 11L) # logical\nmode(TRUE)## [1] \"numeric\"\n## [1] \"integer\"\n## [1] \"character\"\n## [1] \"logical\"\n## [1] \"logical\""},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"vectors","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.3 Vectors","text":"One fundamental data types R vector. vector R like vector math: set ordered elements. elements vector must data type (numeric, character, factor). can create vector enclosing elements c(...), shown .\nmix data types vector; elements vector must data type. mix , R coerce .\nExercise: Create new object vect1 contains following six values: 3, 15, 7.6, 9, 15, 42OK, easy enough, question. type single number console, spits back , like :[1] output? .e., output [1] 3 just 3?eventually get answer, see can discover experiment. operator : , placed two integers x y like : x:y yield sequence integers x y inclusive. make big long vector numbers print .Note number square brackets left hand side output. think ?variable vec ordered container 200 elements, case, integers 200 400. bracked number left hand side tells numeric index (.e., element number) corresponding first value row. first value 200, 19th value 218, 37th value 236, etc.can pick nth element vector using bracket syntax. instance, pull 2nd element vec.Recall c() operator creates vectors. wanted pick one specific value vector position, can make vector numbers like :pull using [] operator, extraction operator, variable vec.OK return original question: get [1] 3 just typed 3L? answer now clear: entered single number, R created vector single element.can also create 'named' vectors, elements name. example:can access elements name using character vector within square brackets. can put order want, can repeat elements:can get vector names using names() function, can set change using something like names(vec2) <- c(\"n1\", \"n2\", \"n3\").Another way access elements using logical vector within square brackets. pull elements vector corresponding element logical vector TRUE. logical vector must length original. can find long vector using length() function.useful tricks save typing creating vectors. Recall command x:y : operator give sequence integers x:y.want repeat vector many times? either type (painful) use rep() function, can repeat vectors different ways.want create sequence something integer steps? can use seq() function. can learn exercises .","code":"\n## put information into a vector using c(...)\nc(1, 2, 3)\n\nc(\"this\", \"is\", \"cool\")\n\n## what happens when you mix types?\nc(2, \"good\", 2, \"b\", \"true\")## [1] 1 2 3\n## [1] \"this\" \"is\"   \"cool\"\n## [1] \"2\"    \"good\" \"2\"    \"b\"    \"true\"\nvect1 <- c(3, 15, 7.6, 9, 15, 42)\n3## [1] 3\nvec <- 200:400\nvec##   [1] 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217\n##  [19] 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235\n##  [37] 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253\n##  [55] 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271\n##  [73] 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289\n##  [91] 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307\n## [109] 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325\n## [127] 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343\n## [145] 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361\n## [163] 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379\n## [181] 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397\n## [199] 398 399 400\nvec[2]## [1] 201\nc(1L, 19L, 37L, 55L)## [1]  1 19 37 55\nvec[c(1L, 19L, 37L, 55L)]\n\n## note also:\nindex <- c(1L, 19L, 37L, 55L)\nvec[index]\n\nvec[c(1L, 1L, 19L, 19L, 19L, 19L)]## [1] 200 218 236 254\n## [1] 200 218 236 254\n## [1] 200 200 218 218 218 218\nvec2 <- c(first = 77.9, second = -13.2, third = 100.1)\nvec2##  first second  third \n##   77.9  -13.2  100.1\nvec2[c(\"third\", \"second\", \"second\")]##  third second second \n##  100.1  -13.2  -13.2\nlength(vec2)\nvec2[c(TRUE, FALSE, TRUE)]## [1] 3\n## first third \n##  77.9 100.1\n# ten zeroes\nrep(0, 10)\n\n# alternating 1 and 3, 7 times\nrep(c(1L, 3L), 7)\n\nrep(c(TRUE, FALSE), 2)##  [1] 0 0 0 0 0 0 0 0 0 0\n##  [1] 1 3 1 3 1 3 1 3 1 3 1 3 1 3\n## [1]  TRUE FALSE  TRUE FALSE\n# Repeat a vector\n# See the ?rep function\nrep(c(TRUE, FALSE), 3)\n\n# Get every other (odd) element of vec\nvec[rep(c(TRUE, FALSE), 100)]\n\n# We can also store the logical vector in a variable and use that\nevens <- rep(c(FALSE, TRUE), 100)## [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE\n##   [1] 200 202 204 206 208 210 212 214 216 218 220 222 224 226 228 230 232 234\n##  [19] 236 238 240 242 244 246 248 250 252 254 256 258 260 262 264 266 268 270\n##  [37] 272 274 276 278 280 282 284 286 288 290 292 294 296 298 300 302 304 306\n##  [55] 308 310 312 314 316 318 320 322 324 326 328 330 332 334 336 338 340 342\n##  [73] 344 346 348 350 352 354 356 358 360 362 364 366 368 370 372 374 376 378\n##  [91] 380 382 384 386 388 390 392 394 396 398 400"},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"exercises","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.3.1 Exercises","text":"built-vector letters contains letters English alphabet. Use indexing vector integers extract letters spell 'cat'.\n\n\nSolution\n\n\nletters[c(3, 1, 20)]\nfunction colors() returns color names R aware . length vector returned function? (Use code find answer.)\n\n\nSolution\n\n\nlength(colors())\n","code":"\nletters[c(3, 1, 20)]\nlength(colors())"},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"vectorized-operations","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.4 Vectorized Operations","text":"R performs calculations vectors special way. look example using \\(z\\)-scores. \\(z\\)-scores deviation score (score minus mean) divided standard deviation. learn concepts later course. say set four IQ scores.want subtract mean four scores, just use following code:subtracts 100 element vector. R automatically assumes wanted ; called vectorized operation makes possible express operations efficiently.calculate \\(z\\)-scores use formula:\\(z = \\frac{X - \\mu}{\\sigma}\\)X scores, \\(\\mu\\) mean, \\(\\sigma\\) standard deviation. can expression formula R follows:can see computed four \\(z\\)-scores single line code. efficient!One thing useful vectorized logical tests. instance, say wanted find set p-values lower .05. easily like :pull significant p-values like :plain English, command says, \"give elements my_pvals my_pvals < .05 true.\"\" Note my_pvals < .05 first evaluated create logical vector, logical vector used index my_pvals.","code":"\n## example IQ scores: mu = 100, sigma = 15\niq <- c(86, 101, 127, 99)\niq - 100## [1] -14   1  27  -1\n## z-scores\n(iq - 100) / 15## [1] -0.93333333  0.06666667  1.80000000 -0.06666667\nmy_pvals <- c(.1, .001, .33, .049, .051, .02, .773)\nmy_pvals < .05## [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE\nmy_pvals[my_pvals < .05]## [1] 0.001 0.049 0.020"},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"exercises-1","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.4.1 Exercises","text":"Create vector integers 0 20 store variable my_ints. divide values 5.modulo operator R %%. command x %% y x y integers give remainder x given divisor y. (instance, 5 %% 3 give 2 2 remainder get divide 5 3.) Calculate modulo values my_ints divisor 5.function call runif(1000, 0, 1) draw 1000 numbers uniform distribution 0 1, simulates p-values get 1000 experiments null hypothesis true. Store result call pvals. Create logical vector called is_sig TRUE corresponding element pvals less .05, FALSE otherwise (hint: vectorized operations last lession), use logical vector pull p-values. Finally, calculate proportion p-values significant.","code":"\nmy_ints <- 0:20\nmy_ints / 5##  [1] 0.0 0.2 0.4 0.6 0.8 1.0 1.2 1.4 1.6 1.8 2.0 2.2 2.4 2.6 2.8 3.0 3.2 3.4 3.6\n## [20] 3.8 4.0\nmy_ints %% 5##  [1] 0 1 2 3 4 0 1 2 3 4 0 1 2 3 4 0 1 2 3 4 0\npvals <- runif(1000, 0, 1)\n\nis_sig <- pvals < .05\n\nsort(pvals[is_sig])\n\nlength(pvals[is_sig]) / length(pvals)"},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"add-on-packages","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.5 Add-on packages","text":"One great things R user extensible: anyone can create new add-software package extends functionality. currently thousands add-packages R users created solve many different kinds problems, just simply fun. packages data visualisation, machine learning, neuroimaging, eyetracking, web scraping, playing games Sudoku.Add-packages distributed base R, downloaded installed archive, way , instance, download install fitness app smartphone.main repository packages reside called CRAN, Comprehensive R Archive Network. package pass strict tests devised R core team allowed part CRAN archive. can install CRAN archive R using install.packages() function.important distinction installing package \nloading package.Installing package done using install.packages(). \nlike installing app smartphone: \napp remain installed remove . \ninstance, want use Facebook phone install \nApp Store Play Store, \nre-install time want use . launch \napp, run background close restart\nphone. Likewise, install package, package \navailable (loaded) every time open R.Installing package done using install.packages(). \nlike installing app smartphone: \napp remain installed remove . \ninstance, want use Facebook phone install \nApp Store Play Store, \nre-install time want use . launch \napp, run background close restart\nphone. Likewise, install package, package \navailable (loaded) every time open R.Loading package: done using library(packagename).\nlike launching app phone: functionality \napp launched remains \nclose app restart. Likewise, run\nlibrary(packagename) within session, functionality \npackage referred packagename made available \nR session. next time start R, need run \nlibrary() function want access functionality.Loading package: done using library(packagename).\nlike launching app phone: functionality \napp launched remains \nclose app restart. Likewise, run\nlibrary(packagename) within session, functionality \npackage referred packagename made available \nR session. next time start R, need run \nlibrary() function want access functionality.may able permanently install packages using R system; may able public workstations lack appropriate privileges.Try installing library fortunes system:get error message, installation successful.can access functionality fortune current R session follows:typed , can run function fortune(), spouts random wisdom one R help lists:Note use convention package::function() package::object indicate add-package function object resides. instance, see readr::read_csv(), refers function read_csv() readr add-package. see function introduced without package name, means part base R system add-package (depending context). Sometimes make explicit using base place package name; instance, might refer rnorm() base base::rnorm().","code":"\ninstall.packages(\"fortunes\")\nlibrary(fortunes)\nfortune()## \n## Thomas Lumley: The precedence of ^ is higher than that of unary minus. It may\n## be surprising, [...]\n## Herve Pages: No, it's not surprising. At least to me... In the country where I\n## grew up, I've been teached that -x^2 means -(x^2) not (-x)^2.\n##    -- Thomas Lumley and Herve Pages (both explaining that operator precedence\n##       is working perfectly well)\n##       R-devel (January 2006)"},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"help","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.6 Getting help","text":"","code":"\n# these methods are all equivalent ways of getting help\nhelp(\"say\") # if package 'cowsay' is loaded\n?say\nhelp(\"say\", package=\"cowsay\") # if cowsay not loaded\n\n??say # search for help files with \"say\"\n\n# start up help in a browser\nhelp.start()"},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"calling-functions","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.7 Calling functions","text":"R lot build functions useful, like round() rounding numbers, sort() sorting . examples use functions.wanted sort scores rounding , can embed sort(iq_z) function first argument round().","code":"\niq_z <- (iq - 100) / 15\n\nsort(iq_z)\n\nround(iq_z, 2)## [1] -0.93333333 -0.06666667  0.06666667  1.80000000\n## [1] -0.93  0.07  1.80 -0.07\nround(sort(iq_z), 2)## [1] -0.93 -0.07  0.07  1.80"},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"function-syntax","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.7.1 Function syntax","text":"Functions following generic syntax:functionname(arg1, arg2, arg3, ...)function named arguments may may default\nvalues. Arguments without default values mandatory; arguments\nvalues optional. optional argument \nspecified, take default value. can override default values supplying .Arguments can specified :position (unnamed)nameMost functions return value, may also produce ’side effects’\nlike printing console.illustrate, function rnorm() generates random numbers standard normal distribution. help page rnorm() (accessed typing ?rnorm console) shows syntaxrnorm(n, mean = 0, sd = 1)n number randomly generated numbers want, mean mean distribution, sd standard deviation. default mean 0, default standard deviation 1. default n means ’ll get error specify :Error rnorm() : argument \"n\" missing, defaultIf want 10 random numbers distribution mean 0 standard deviation, can just use defaults.want 10 numbers distribution mean 100:equivalent less efficient way calling function:need name arguments R recognize intended fill first second arguments position function call. However, want change default argument coming later list, need name . instance, wanted keep default mean = 0 change standard deviation 100 way:","code":"\nrnorm()\nrnorm(10)##  [1] -1.0757864  0.1311721  0.2358528 -0.7830163 -2.1644953 -1.3013681\n##  [7] -0.2052661 -1.0980443 -0.4126694  1.0366412\nrnorm(10, 100)##  [1]  99.38386 100.26058 101.49286  99.60480 100.04932 100.77347 101.02930\n##  [8]  99.40667 101.24050  99.96300\nrnorm(n = 10, mean = 100)##  [1] 101.78166  98.40983  99.44995  98.64186 101.38305  99.01906  99.44279\n##  [8] 102.86124 100.26840 100.37652\nrnorm(10, sd = 100)##  [1] -30.040485 -18.196164  39.635285  50.266067 -41.956565 176.912607\n##  [7]   1.149451 -26.220380 -44.115820 -54.412135"},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"cowsay","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.7.2 Exercises","text":"following exercises, working cowsay add-package (help(package = \"cowsay\"))Check see vignettes available package.Load read vignette get idea package works.first task develop reproducible script accomplishes tasks . Compile RMarkdown (rmd) document HTML. Make sure report includes code addition output.Important! Try perform task making shortest function call can taking advantage function defaults include results R script.Make cat say, “FEED ”\n\n\nSolution\n\n\nsay(\"FEED \")\n## \n##  -------------- \n## FEED \n##  --------------\n##     \\\n##       \\\n##         \\\n##             |\\___/|\n##           ==) ^Y^ (==\n##             \\  ^  /\n##              )=*=(\n##             /     \\\n##             |     |\n##            /| | | |\\\n##            \\| | |_|/\\\n##       jgs  //_// ___/\n##                \\_)\n## \nMake cat say, “FEED ”Make shark say “Hello world!”\n\n\nSolution\n\n\nsay(\"Hello world!\", \"shark\")\n## \n##  -------------- \n## Hello world! \n##  --------------\n##     \\\n##       \\\n##         \\\n##               /\"\"-._\n##               .       '-,\n##                :          '',\n##                 ;      *     '.\n##                  ' *         () '.\n##                    \\               \\\n##                     \\      _.---.._ '.\n##                     :  .' _.--''-''  \\ ,'\n##         .._           '/.'             . ;\n##         ; `-.          ,                \\'\n##          ;   `,         ;              ._\\\n##           ;    \\     _,-'                ''--._\n##           :    \\_,-'                          '-._\n##           \\ ,-'                       .          '-._\n##           .'         __.-'';            \\...,__       '.\n##         .'      _,-'        \\              \\   ''--.,__  '\\\n##         /    _,--' ;         \\              ;           \\^.}\n##         ;_,-' )     \\  )\\      )            ;\n##              /       \\/  \\_.,-'             ;\n##             /                              ;\n##          ,-'  _,-'''-.    ,-.,            ;      PFA\n##       ,-' _.-'        \\  /    |/'-._...--'\n##      :--``             )/\n##   '\n## \nMake shark say “Hello world!”Make anything produce famous quote\n\n\nSolution\n\n\nsay(\"want know God thinks money, just look people gave . ~Dorothy Parker\", \n    \"grumpycat\")\n## \n##  -------------- \n## want know God thinks money, just look people gave . ~Dorothy Parker \n##  --------------\n##     \\\n##       \\\n##         \\\n##       ﾊ _ ﾊ\n##       ಠ X ಠ\n## \nMake anything produce famous quoteMake clippy warn user impending apocalypse\n\n\nSolution\n\n\nsay(\"looks like trying annihilate planet particle beam. sure want ?\", \"clippy\")\n## \n## \n##  ----- \n## looks like trying annihilate planet particle beam. sure want ? \n##  ------ \n##     \\   \n##      \\   __\n##    / \\\n##    | |\n##    @ @\n##   || ||\n##   || ||\n##   |\\_/|\n##   \\___/ GB\nMake clippy warn user impending apocalypseMake cat produce random quote R coder. get different quote every time run code (hint: read documentation cowsay::say()).\n\n\nSolution\n\n\nsay(\"fortune\")\n## \n##  -------------- \n## really curious know \"two types\" sum squares called \"Type \" \"Type III\"! common misconception, particularly among SAS users fed nonsense quite often professional lives. Fortunately reality much simpler. , sensible reckoning, ONE type sum squares, always represents improvement sum squares outer (alternative) model inner (null hypothesis) model. SAS highly dubious classification sums squares encourage users concentrate null hypothesis model forget alternative. always bad idea surprisingly can lead nonsensical tests, test provides main effects \"even presence interactions\", something beggars definition, let alone belief.\n##  Bill Venables\n##  R-help\n##  November 2000 \n##  --------------\n##     \\\n##       \\\n##         \\\n##             |\\___/|\n##           ==) ^Y^ (==\n##             \\  ^  /\n##              )=*=(\n##             /     \\\n##             |     |\n##            /| | | |\\\n##            \\| | |_|/\\\n##       jgs  //_// ___/\n##                \\_)\n## \nMake cat produce random quote R coder. get different quote every time run code (hint: read documentation cowsay::say()).Define variable named creature assign value one types creatures accepted say() function. use variable output current time.\n\n\nSolution\n\n\ncreature <- \"spider\"\n\nsay(base::date(), creature)\n## \n##  ----- \n## Tue Mar  1 14:09:57 2022 \n##  ------ \n##     \\   \n##      \\\n##               |\n##               |\n##               |\n##              __\n##           | /  \\ |\n##          \\_\\\\  //_/\n##           .'/()\\'.\n##            \\\\  //  [nosig]\n## \nDefine variable named creature assign value one types creatures accepted say() function. use variable output current time.Change value variable creature thing, make display time.\n\n\nSolution\n\n\ncreature <- \"buffalo\"\n\nsay(base::date(), creature)\n## \n##  -------------- \n## Tue Mar  1 14:09:57 2022 \n##  --------------\n##     \\\n##       \\\n##         \\\n##                    _.-````'-,_\n##          _,.,_ ,-'`           `'-.,_\n##        /)     (                   '``-.\n##       ((      ) )                      `\\\n##         \\)    (_/                        )\\\n##         |       /)           '    ,'    / \\\n##         `\\    ^'            '     (    /  ))\n##           |      _/\\ ,     /    ,,`\\   (  \"`\n##           \\Y,   |   \\  \\  | ````| / \\_ \\\n##             `)_/      \\  \\  )    ( >  ( >\n##                        \\( \\(     |/   |/\n##           mic & dwb  /_(/_(    /_(  /_(\n## \nChange value variable creature thing, make display time.Restart R re-run script check whether reproducible.Restart R re-run script check whether reproducible.","code":"\nvignette(package = \"cowsay\")\nvignette(\"cowsay_tutorial\", package = \"cowsay\")\nsay(\"FEED ME\")## \n##  -------------- \n## FEED ME \n##  --------------\n##     \\\n##       \\\n##         \\\n##             |\\___/|\n##           ==) ^Y^ (==\n##             \\  ^  /\n##              )=*=(\n##             /     \\\n##             |     |\n##            /| | | |\\\n##            \\| | |_|/\\\n##       jgs  //_// ___/\n##                \\_)\n## \nsay(\"Hello world!\", \"shark\")## \n##  -------------- \n## Hello world! \n##  --------------\n##     \\\n##       \\\n##         \\\n##               /\"\"-._\n##               .       '-,\n##                :          '',\n##                 ;      *     '.\n##                  ' *         () '.\n##                    \\               \\\n##                     \\      _.---.._ '.\n##                     :  .' _.--''-''  \\ ,'\n##         .._           '/.'             . ;\n##         ; `-.          ,                \\'\n##          ;   `,         ;              ._\\\n##           ;    \\     _,-'                ''--._\n##           :    \\_,-'                          '-._\n##           \\ ,-'                       .          '-._\n##           .'         __.-'';            \\...,__       '.\n##         .'      _,-'        \\              \\   ''--.,__  '\\\n##         /    _,--' ;         \\              ;           \\^.}\n##         ;_,-' )     \\  )\\      )            ;\n##              /       \\/  \\_.,-'             ;\n##             /                              ;\n##          ,-'  _,-'''-.    ,-.,            ;      PFA\n##       ,-' _.-'        \\  /    |/'-._...--'\n##      :--``             )/\n##   '\n## \nsay(\"If you want to know what God thinks of money, just look at the people he gave it to. ~Dorothy Parker\", \n    \"grumpycat\")## \n##  -------------- \n## If you want to know what God thinks of money, just look at the people he gave it to. ~Dorothy Parker \n##  --------------\n##     \\\n##       \\\n##         \\\n##       ﾊ _ ﾊ\n##       ಠ X ಠ\n## \nsay(\"It looks like you are trying to annihilate the planet with a particle beam. Are you sure you want to do this?\", \"clippy\")## \n## \n##  ----- \n## It looks like you are trying to annihilate the planet with a particle beam. Are you sure you want to do this? \n##  ------ \n##     \\   \n##      \\   __\n##    / \\\n##    | |\n##    @ @\n##   || ||\n##   || ||\n##   |\\_/|\n##   \\___/ GB\nsay(\"fortune\")## \n##  -------------- \n## I'm really curious to know why the \"two types\" of sum of squares are called \"Type I\" and \"Type III\"! This is a very common misconception, particularly among SAS users who have been fed this nonsense quite often for all their professional lives. Fortunately the reality is much simpler. There is, by any sensible reckoning, only ONE type of sum of squares, and it always represents an improvement sum of squares of the outer (or alternative) model over the inner (or null hypothesis) model. What the SAS highly dubious classification of sums of squares does is to encourage users to concentrate on the null hypothesis model and to forget about the alternative. This is always a very bad idea and not surprisingly it can lead to nonsensical tests, as in the test it provides for main effects \"even in the presence of interactions\", something which beggars definition, let alone belief.\n##  Bill Venables\n##  R-help\n##  November 2000 \n##  --------------\n##     \\\n##       \\\n##         \\\n##             |\\___/|\n##           ==) ^Y^ (==\n##             \\  ^  /\n##              )=*=(\n##             /     \\\n##             |     |\n##            /| | | |\\\n##            \\| | |_|/\\\n##       jgs  //_// ___/\n##                \\_)\n## \ncreature <- \"spider\"\n\nsay(base::date(), creature)## \n##  ----- \n## Tue Mar  1 14:09:57 2022 \n##  ------ \n##     \\   \n##      \\\n##               |\n##               |\n##               |\n##              __\n##           | /  \\ |\n##          \\_\\\\  //_/\n##           .'/()\\'.\n##            \\\\  //  [nosig]\n## \ncreature <- \"buffalo\"\n\nsay(base::date(), creature)## \n##  -------------- \n## Tue Mar  1 14:09:57 2022 \n##  --------------\n##     \\\n##       \\\n##         \\\n##                    _.-````'-,_\n##          _,.,_ ,-'`           `'-.,_\n##        /)     (                   '``-.\n##       ((      ) )                      `\\\n##         \\)    (_/                        )\\\n##         |       /)           '    ,'    / \\\n##         `\\    ^'            '     (    /  ))\n##           |      _/\\ ,     /    ,,`\\   (  \"`\n##           \\Y,   |   \\  \\  | ````| / \\_ \\\n##             `)_/      \\  \\  )    ( >  ( >\n##                        \\( \\(     |/   |/\n##           mic & dwb  /_(/_(    /_(  /_(\n## "},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"pipes","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.8 Stringing together commands with pipes","text":"Pipes (%>%) useful stringing together sequence commands R. might bit confusing first worth learning make code readable efficient.\npipes recent innovation, part base R. means need load add-package use . Although \"home\" package pipe operator package called magrittr, commonly gain access loading tidyverse package (library(\"tidyverse\")). get either following errors script:Error: unexpected SPECIAL \"%>%\"\norError: find function \"%>%\"tried use %>% library(\"tidyverse\").easiest understand use pipes example. say want sample 5 random integers 1 10 (replacement), figure unique numbers sampled, sort descending order. need call three functions sequence: sample() generate integers, unique() figure unique integers sampled (integer may sampled multiple times), sort() decreasing = TRUE put descending order. might write code like :nothing wrong code, required us define variables x y ever need , clutter environment. avoid rewrite code using nested function calls like :(call looks confusing, !) call sample() embedded within call unique() turn embedded within call sort(). functions executed embedded (\"bottom\") least embedded (\"top\"), starting function sample(), whose result passed first argument unique(), whose result turn passed first argument sort(); notice second argument sort (TRUE) way end statement, making hard figure three functions belongs . read left right; however, understanding code requires us work way right left, therefore unnatural. Moreover simply ugly line code.pipes come . can re-write original code using pipes like :R calculate result sample(1:10, 5, replace = TRUE) pass result first argument unique(); , result unique() turn passed along first argument sort() second argument set TRUE. thing note function call right hand side pipe, omit first argument start second, pipe automatically places result call left spot.","code":"\nx <- sample(1:10, 5, replace = TRUE)\ny <- unique(x)\nsort(y, TRUE) # set second argument to 'TRUE' so that sort order is descending## [1] 6 4 2\nsort(unique(sample(1:10, 5, replace = TRUE)), TRUE)## [1] 6 5 4 2 1\nsample(1:10, 5, replace = TRUE) %>% \n  unique() %>% \n  sort(TRUE)## [1] 8 5 4 1"},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"exercises-2","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.8.1 Exercises","text":"Re-write following sequence commands single 'pipeline'.Deconstruct pipeline back separate commands.","code":"\n# do not edit this chunk\nx <- 1:20 # integers from 1:20\ny <- rep(x, 2) # then repeat them twice\nz <- sum(y) # and then take the sum\nx <- 1:20 %>% rep(2) %>% sum()\n# do not edit this chunk\nlager <- LETTERS[c(18, 5, 7, 1, 12)] %>%\n  rev() %>%\n  paste(collapse = \"\")\nregal <- LETTERS[c(18, 5, 7, 1, 12)]\nreversed <- rev(regal)\nlager <- paste(reversed, collapse = \"\") # make it into a string"},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"lists","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.9 Lists","text":"Recall vectors can contain data one type. want store collection data different data types? purpose use list. Define list using list() function.can access elements list either position:name, like :like :\nFun fact: tabular data, stored data.frame tibble objects, learn next section, special type list. means can access columns one object using tablename$column syntax, sometimes useful.\n","code":"\n## information about today\ntoday <- list(date = \"2018-12-06\",\n     n_emails_in_inbox = 500L,\n     people_who_stopped_by = c(\"Niamh\", \"Lynda\", \"Alex\"),\n     weather = \"rainy\",\n     average_temp = 6.5\n     )\n## note the use of the double square bracket!\ntoday[[2]]## [1] 500\ntoday[[\"people_who_stopped_by\"]]## [1] \"Niamh\" \"Lynda\" \"Alex\"\ntoday$weather## [1] \"rainy\""},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"tabular-data","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.10 Tabular data","text":"working course tabular data, data arranged form table.Tabular data structures, like lists, allow collection data different types (characters, integers, logical, etc.) subject constraint \"column\" table (element list) must number elements. base R version table called data.frame 'tidyverse' version called tibble. Tibbles far easier work , using . learn differences two data structures, see vignette(\"tibble\").Tabular data becomes especially important talk tidy data later , consists set simple principles structuring data.creating tibble scratch, can use tibble() function, type data right . Note want value repeat multiple times, specify one-element vector; R expand vector fill table. columns tibble must lengths length 1.want use tibble() function, either need load tibble package tidyverse package (load tibble addition packages). latter.can get information table dimensions using functions ncol() (number columns), nrow() (number rows), dim() (vector number rows number columns).","code":"\nlibrary(\"tidyverse\")\nmonths <- tibble(ID = 1:12,\n                 name = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\",\n                          \"May\", \"Jun\", \"Jul\", \"Aug\",\n                          \"Sep\", \"Oct\", \"Nov\", \"Dec\"))\n\n# print it\nmonths\n\n# how many rows?\nnrow(months)\n\n# how many columns?\nncol(months)"},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"viewing-your-tibble","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.10.1 Viewing your tibble","text":"Always, always, always, look data created table loaded file. Also look step transforms tibble. view table, best console unless specifically want part script report.three ways look tibble: View() [*NB: capital 'V'], print(), glimpse().print() method can run explicitly, commonly called just typing variable name blank line. Usually call print() want fine control information displayed.Note default print entire table, just first 10 rows. look starwars table built tidyverse.can see 87 rows 14 column table, can see first 10 rows first 8 columns.want see 87 rows reason, use explicit call print(), set argument n number rows want see. want , just use +Inf, symbol 'infinite' rows.still see columns. important us, can use glimpse(), gives sideways version tibble.way look table graphical spreadsheet-like version given View() (capital 'V'). can useful console, ever put one script create annoying pop-window user goes run .Note data.frame objects printed different ways tibble objects. print data.frame object thousands millions rows, just get preview... spam console row upon row data. want make data.frame tibble prints nicely, just use as_tibble() function.","code":"\nlibrary(\"tidyverse\")\nstarwars## # A tibble: 87 × 14\n##    name    height  mass hair_color  skin_color eye_color birth_year sex   gender\n##    <chr>    <int> <dbl> <chr>       <chr>      <chr>          <dbl> <chr> <chr> \n##  1 Luke S…    172    77 blond       fair       blue            19   male  mascu…\n##  2 C-3PO      167    75 <NA>        gold       yellow         112   none  mascu…\n##  3 R2-D2       96    32 <NA>        white, bl… red             33   none  mascu…\n##  4 Darth …    202   136 none        white      yellow          41.9 male  mascu…\n##  5 Leia O…    150    49 brown       light      brown           19   fema… femin…\n##  6 Owen L…    178   120 brown, grey light      blue            52   male  mascu…\n##  7 Beru W…    165    75 brown       light      blue            47   fema… femin…\n##  8 R5-D4       97    32 <NA>        white, red red             NA   none  mascu…\n##  9 Biggs …    183    84 black       light      brown           24   male  mascu…\n## 10 Obi-Wa…    182    77 auburn, wh… fair       blue-gray       57   male  mascu…\n## # … with 77 more rows, and 5 more variables: homeworld <chr>, species <chr>,\n## #   films <list>, vehicles <list>, starships <list>\nprint(starwars, n = +Inf) # try this in the console\nglimpse(starwars)## Rows: 87\n## Columns: 14\n## $ name       <chr> \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Leia Or…\n## $ height     <int> 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 180, 2…\n## $ mass       <dbl> 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0, 77.…\n## $ hair_color <chr> \"blond\", NA, NA, \"none\", \"brown\", \"brown, grey\", \"brown\", N…\n## $ skin_color <chr> \"fair\", \"gold\", \"white, blue\", \"white\", \"light\", \"light\", \"…\n## $ eye_color  <chr> \"blue\", \"yellow\", \"red\", \"yellow\", \"brown\", \"blue\", \"blue\",…\n## $ birth_year <dbl> 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 57.0, …\n## $ sex        <chr> \"male\", \"none\", \"none\", \"male\", \"female\", \"male\", \"female\",…\n## $ gender     <chr> \"masculine\", \"masculine\", \"masculine\", \"masculine\", \"femini…\n## $ homeworld  <chr> \"Tatooine\", \"Tatooine\", \"Naboo\", \"Tatooine\", \"Alderaan\", \"T…\n## $ species    <chr> \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Huma…\n## $ films      <list> <\"The Empire Strikes Back\", \"Revenge of the Sith\", \"Return…\n## $ vehicles   <list> <\"Snowspeeder\", \"Imperial Speeder Bike\">, <>, <>, <>, \"Imp…\n## $ starships  <list> <\"X-wing\", \"Imperial shuttle\">, <>, <>, \"TIE Advanced x1\",…\nmtcars # prints out way too many rows; TMI\n\nas_tibble(mtcars) # much cleaner\nmtcars2 <- as_tibble(mtcars) # store it"},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"accessing-rows-and-columns","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.10.2 Accessing rows and columns","text":"various base R ways accessing specific columns rows table useful know , learning easier (readable) ways get lecture data wrangling. Examples base R accessing functions provided reference.learn tidyverse way perform data frame operations afternoon lessons.","code":"\nmonths[1, ] # first row\n\nmonths[, 2] # second column (position)\n\nmonths[1:3, ] # first 3 months\n\nmonths[, c(\"Month\")] # access column by name\n\nmonths$month  # by column name"},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"exercises-3","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.10.3 Exercises","text":"Create tibble name, age, sex 3-5 people whose names, ages, sex know.Convert built-base R iris dataset tibble, store variable iris2.Create tibble structure table , using minimum typing possible. (Hint: rep()). Store variable my_tbl.","code":"\n# or you can do this with the tibble function\nfamily <- tibble(name = c(\"Jorge\", \"Esther\", \"Mel\"),\n                 age = c(40, 41, 20),\n                 sex = c(\"male\", \"female\", \"male\") )\n\n# also note:\n# you can type this in row by row, rather than column by column,\n# using the 'tribble' function. See ?tribble and \nfamily <- tribble(~name,  ~age, ~sex,\n                  \"Jorge\",   40,  \"male\",\n                  \"Esther\",  41,  \"female\",\n                  \"Mel\",     20,  \"male\")\niris2 <- as_tibble(iris)## # A tibble: 8 × 4\n##      ID A     B     C    \n##   <int> <chr> <chr> <chr>\n## 1     1 A1    B1    C1   \n## 2     2 A1    B2    C1   \n## 3     3 A1    B1    C1   \n## 4     4 A1    B2    C1   \n## 5     5 A2    B1    C1   \n## 6     6 A2    B2    C1   \n## 7     7 A2    B1    C1   \n## 8     8 A2    B2    C1\nmy_tbl <- tibble(ID = 1:8,\n                 A = rep(c(\"A1\", \"A2\"), each = 4),\n                 B = rep(c(\"B1\", \"B2\"), 4),\n                 C = \"C1\")    "},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"working-with-files","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.11 Working with files","text":"","code":""},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"workdir","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.11.1 Working Directory","text":"developing analysis, usually want scripts data files one subtree computer's directory structure. Usually single working directory data scripts stored.references data files scripts relative \ntop level directory tree; always use relative\npaths, never use absolute paths.references data files scripts relative \ntop level directory tree; always use relative\npaths, never use absolute paths.Never set change working directory script; always store\nmain script file top-level directory manually set\nworking directory location.Never set change working directory script; always store\nmain script file top-level directory manually set\nworking directory location.instance, Windows machine data scripts live directory C:\\Carla's_files\\thesis22\\my_thesis\\new_analysis, set working directory new_analysis one two ways: (1) going Session pull menu RStudio choosing Set Working Directory, (2) typing setwd(\"C:\\Carla's_files\\thesis22\\my_thesis\\new_analysis\") console window.\nNever put setwd() command script, others directory tree (laptop dies get new one, neither ).\nscript needs file subdirectory new_analysis, say, analysis2/dat.rds, load using relative path:load using absolute path:\nAlso note convention using forward slashes, unlike Windows specific convention using backward slashes. make references files platform independent.\n","code":"\ndat <- readRDS(\"analysis2/dat.rds\")  # right way\ndat <- readRDS(\"C:/Carla's_files/thesis22/my_thesis/new_analysis/analysis2/dat.rds\")   # wrong"},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"load","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.11.2 Loading Data","text":"many different types files might work data analysis. different file types usually distinguished three letter extension following period end file name. examples different types files functions use read write .Note: following conventions introduced section add-packages, readr::read_csv() refers read_csv() function readr package, readxl::read_excel() refers function read_excel() package readxl.Probably common file type encounter .csv (comma-separated values). name suggests, CSV file distinguishes values go variable separating commas, text values sometimes enclosed double quotes. first line file usually provides names variables. example, first lines CSV containing Scottish baby names (see page National Records Scotland):six variables dataset, names given first line file: yr, sex, FirstForename, number, rank, position. can see values variables given order, separated commas, subsequent line file.read CSV files, best practice use readr::read_csv() function. readr package automatically loaaded part tidyverse package, using almost every script. Note normally want store result read_csv() function variable, :loaded, can view data using data viewer. upper right hand window RStudio, Environment tab, see object dat listed.allows check data loaded properly. can close tab ’re done looking —remove object.","code":"yr,sex,FirstForename,number,rank,position\n1974,B,David,1794,1,1\n1974,B,John,1528,2,2\n1974,B,Paul,1260,3,3\n1974,B,Mark,1234,4,4\n1974,B,James,1202,5,5\n1974,B,Andrew,1067,6,6\n1974,B,Scott,1060,7,7\n1974,B,Steven,1020,8,8\n1974,B,Robert,885,9,9\n1974,B,Stephen,866,10,10\nlibrary(tidyverse)\ndat <- read_csv(\"my_data_file.csv\")"},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"writing-data","chapter":"B Coding in R with the RStudio IDE","heading":"B.4.11.3 Writing Data","text":"data want save data CSV file, use readr::write_csv(), follows.save data CSV format working directory.","code":"\nwrite_csv(dat, \"my_data_file2.csv\")"},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"reproducible-reports-with-rstudio-and-rmarkdown","chapter":"B Coding in R with the RStudio IDE","heading":"B.5 Reproducible reports with RStudio and RMarkdown","text":"working toward producing reproducible reports following principles “literate programming”. basic idea text report together single document along R code needed perform analyses generate tables. report ’compiled’ original format , portable format, HTML PDF. different traditional cutting pasting approaches , instance, create graph Microsoft Excel statistics program like SPSS paste Microsoft Word.using RMarkdown create reproducible reports, enables interleaving text R code blocks.can read Donald Knuth's idea literate programming Wikipedia page, RMarkdown format .reproducible script contain sections code code blocks. code block delimited using three backtick symbols row, like :open new RMarkdown file template, see example document several code blocks .create HTML PDF report rmarkdown (rmd) document, compile . Compiling document called ’knitting’ RStudio. button looks like ball yarn needles click compile file report. Try template file see happens!Exercise: Create RMarkdown file including answer exercises function calls cowsay (questions 1--7 ), compile HTML.","code":"This is just some text before the code block\n\n```{r blockname}\n# now we are inside the R code block\nrnorm(10)  # generate some random numbers\n```\n\nnow we're back outside the code block"},{"path":"coding-in-r-with-the-rstudio-ide.html","id":"resources","chapter":"B Coding in R with the RStudio IDE","heading":"B.6 Resources","text":"may find additional resources useful supporting learning R/RStudio.RStudio projectsRStudio IDE CheatsheetRStudio Data Import CheatsheetGithub RStudioR MarkdownIndexingTibbles online helpChapter 11: Data Import R Data ScienceVideo: Developing analysis R/RStudio: Scottish babynames (1/2)Video: Developing analysis R/RStudio: Scottish babynames (2/2)","code":""},{"path":"references-and-further-reading.html","id":"references-and-further-reading","chapter":"C References and Further Reading","heading":"C References and Further Reading","text":"","code":""},{"path":"references-and-further-reading.html","id":"references","chapter":"C References and Further Reading","heading":"C.1 References","text":"","code":""},{"path":"references-and-further-reading.html","id":"further-reading","chapter":"C References and Further Reading","heading":"C.2 Further reading","text":"","code":""}]
